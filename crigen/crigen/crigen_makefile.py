#!/usr/bin/python
# -*- coding: utf-8 -*-
# Made by Leo smith
# crigen_makefile.py
# Description:
# The makefile Generator

import os

epi_header = """##
## EPITECH PROJECT, 2017
## Makefile
## File description:
## Makefile generated by crigen, for criterion
##
"""

class Makefile():
    ''' The Makefile Generator of crigen '''

    def __init__(self, lib_path="../lib", path=".", src_path="../srcs",\
                include_path="../include", epi_cfg=True, verbose=False):
        if lib_path is not None:
            self.lib = lib_path
        else:
            self.lib = "../lib"
        if path is not None:
            self.path = path
        else:
            self.path = "."
        self.epitech = epi_cfg
        self.verb = verbose
        if src_path is not None:
            self.srcs = src_path
        else:
            self.srcs = "../srcs"
        if include_path is not None:
            self.include = include_path
        else:
            self.include = "../include"
        try:
            self.fp = open(self.path+"/Makefile", "w")
        except:
            print "[Error] could not open Makefile at: %s" % (self.path + "/Makefile")
            self.fp = -1

    def write_header(self):
        if self.verb:
            print "Creating header for Makefile at: %s" % (self.path + "/Makefile")
        self.fp.write(epi_header)

    def write_suffixes(self):
        if self.verb:
            print "Writing file suffixes expressions"
        self.fp.write("\n.SUFFIXES:\t.c.o\n")

    def write_flags(self):
        if self.verb:
            print "Writing flags"
        self.fp.write("\nCC=\t\t\tgcc\n")
        self.fp.write("\nCFLAGS=\t\t-Wall -Wextra -Werror --coverage -I%s -I./include\n" %\
                self.include)
        self.fp.write("LDFLAGS=\t-L%s -lcriterion -lgcov" % self.lib)
        for i in os.listdir(self.lib):
            if os.path.isdir(self.lib +"/"+ i):
                self.fp.write(" -l%s" % i)
                if self.verb:
                    print "Adding lib: %s" % i
        self.fp.write("\n\nNAME=\t\tunits\n")

    def write_source(self):
        inc = 0
        if self.verb:
            print "retreiving source"
        self.fp.write("\nSRC_DIR=\t$(realpath %s/%s)\n" % (self.path, self.srcs))
        for i in os.listdir(self.srcs):
            if inc == 0 and ".c" in i:
                self.fp.write("SRC=\t\t$(SRC_DIR)/%s                       \\\n" % i)
                inc += 1
            if ".c" in i:
                self.fp.write("\t\t\t$(SRC_DIR)/%s                           \\\n" % i)
                inc += 1
        self.fp.write("\nSRC_UT_DIR=\t$(realpath %s)\n" % self.path)
        inc = 0
        for i in os.listdir(self.path):
            if inc == 0 and ".c" in i:
                self.fp.write("SRC_UT=\t\t$(SRC_UT_DIR)/%s                       \\\n" % i)
                inc += 1
            if ".c" in i:
                self.fp.write("\t\t\t$(SRC_UT_DIR)/%s                           \\\n" % i)
                inc += 1
        self.fp.write("\nGCDA_FILES=\t$(SRC:.c=.gcda) $(SRC_UT:.c=.gcda)\n")
        self.fp.write("GCNO_FILES=\t$(SRC:.c=.gcno) $(SRC_UT:.c=.gcno)\n")
        self.fp.write("OBJ=\t\t$(SRC:.c=.o) $(SRC_UT:.c=.o)\n\n")

    def write_rules(self):
        if self.verb:
            print "writing makefile rules"
        self.fp.write("all:\t\t$(NAME)\n\n")
        self.fp.write("run:\n\t\t@./$(NAME)\n\n")
        self.fp.write("$(NAME):\t$(OBJ)\n")
        for i in os.listdir(self.lib):
            if os.path.isdir(self.lib + "/" + i):
                self.fp.write("\t\tmake -C %s/%s re\n" % (self.lib, i))
        self.fp.write("\t\t$(CC) $(CFLAGS) -o $(NAME) $(OBJ) $(LDFLAGS)\n")
        self.fp.write("\n.c.o:\n\t$(CC) $(CFLAGS) -o $@ $<\n")
        self.fp.write("\nclean:\n")
        self.fp.write("\t\t@rm -rf $(OBJ) $(GCDA_FILES) $(GCNO_FILES)\n")
        for i in os.listdir(self.lib):
            if os.path.isdir(self.lib + "/" + i):
                self.fp.write("\t\tmake -C %s/%s clean\n" % (self.lib, i))
        self.fp.write("\nfclean:\t\tclean\n")
        for i in os.listdir(self.lib):
            if os.path.isdir(self.lib + "/" + i):
                self.fp.write("\t\tmake -C %s/%s fclean\n" % (self.lib, i))
        self.fp.write("\t\t@rm -rf $(NAME)\n")
        self.fp.write("\nre:\tfclean all\n\n")
        self.fp.write(".PHONY:\tclean fclean re\n")

    def create(self):
        if self.fp == -1:
            return
        if self.verb and self.fp != -1:
            print "Created Makefile at: %s" % (self.path + "/Makefile")
        if self.epitech:
            self.write_header()
        self.write_suffixes()
        self.write_flags()
        self.write_source()
        self.write_rules()

if __name__ == "__main__":
    Makefile().create()
