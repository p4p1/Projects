import psetup, sys
from termcolor import colored

class config_usage():
    ''' This class should provide all of the information about the config
    and how to use this script to it's full potential '''

    def __init__(self):
        self.version = psetup.__version__

    def usage(self):
        print '\t%s -all        # do a full setup' % sys.argv[0]
        print '\t%s -c [name]   # create a C env' % sys.argv[0]
        print '\t%s -py [name]  # create a py env' % sys.argv[0]
        print '\t%s -md [name]  # create a md env' % sys.argv[0]
        print '\t%s -html [name]# create a html env' % sys.argv[0]
        print '\t%s -pool [name]# create pool env' % sys.argv[0]
        print '\t%s -rep [name] # create repo for anything' % sys.argv[0]
        print '\t%s -blih       # install custom blih' % sys.argv[0]
        print '\t%s -vim        # install my vim config' % sys.argv[0]
        print '\t%s -bash       # install bash config' % sys.argv[0]
        print '\t%s -fish       # install fish config' % sys.argv[0]
        print '\t%s -cfg        # update the configartion of %s' \
                % (sys.argv[0], sys.argv[0])
        print '\t%s -pymodule   # install python modules' % sys.argv[0]
        print '\t%s -software   # install all of the important software' % sys.argv[0]
        print '\t%s -git        # setup git' % sys.argv[0]
        print '\t%s -man        # show the info page' % sys.argv[0]
        print '\t%s -h          # display the usage' % sys.argv[0]
        print 'DEFAULT TO -man IF YOU ARE TOTALY LOST'

    def display_everything(self):
        print colored("[$] psetup.py, tool made by Leo Smith aka p4p1.", "cyan")
        print colored(".. This tool has for purpose of setting up the environement for my workflow.", "cyan")
        print
        print '-' * 10
        print
        print colored("-> Usage:", "green")
        self.usage()
        print
        print colored("-> Software version:", "green")
        print '\t Version %s' % psetup.__version__
        try:
            if psetup.updator.need_update():
                print colored('\tYou need to update...', 'red')
        except:
            print colored("\t [!] No network connection", "red")
        print
        print colored("-> Environement generator", "green")
        print 'Supported languages: C, python, markdown, html'
        print colored("-- C --", "magenta")
        print '\t{ProvidedName}/ --src /'
        print '\t                |       + {ProvidedName}.c'
        print '\t                |-include /'
        print '\t                |       + {ProvidedName}.h'
        print '\t                |-test /'
        print '\t                |       + test-{ProvidedName}.c'
        print '\t                + Makefile'
        print colored("-- python --", "magenta")
        print '\t{ProvidedName}/ --hy /'
        print '\t                |       + __init__.py'
        print '\t                |       + hy.py'
        print '\t                |-bin /'
        print '\t                |       + hy'
        print '\t                + setup.py'
        print colored("-- MarkDown --", "magenta")
        print '\t{ProvidedName}/ -- {ProvidedName}.md'
        print '\t                + README.md'
        print colored("-- HTML --", "magenta")
        print '\t{ProvidedName}/ -- img /'
        print '\t                + {ProvidedName}.html'
        print colored("-- Pool --", "magenta")
        print colored("-> with a number n of exo provided", "magenta")
        print '\t{ProvidedName}/ --bin /'
        print '\t                |-test /'
        print '\t                |      + test-{ProvidedName#n}.c'
        print '\t                + {ProvidedName#n}.c'
        print '\t                + {ProvidedName}.h'
        print '\t                + Makefile'
        print colored("-- Repo --", "magenta")
        print '\t{ProvidedName}/ --{DirNameProvided#n} /'
        print '\t                |                     + {ProvidedName#n}'
        print '\t                + {ProvidedName#n}'
        print
        print colored("-> How to swim?", "green")
        print '\tSTEP 1: Make shure psetup is configured and updated.'
        print colored("\t\tpsetup -u; psetup-cfg", "magenta")
        print
        print '\tSTEP 2: Go through the pdf find all of the exercices, do not'
        print '\t....... count the test exercices they are generated by the'
        print '\t....... script.'
        print
        print '\tSTEP 3: Run psetup pool mode...'
        print colored("\t\tpsetup -pool PUT_POOL_NAME_HERE", "magenta")
        print
        print '\tSTEP 4: Enter the number of exercices that you have to do.'
        print
        print '\tSTEP 5: Enter each exercice name, psetup will create a C file'
        print '\t....... for each ex.';
        print
        print '\tNOTA BENE: my_putchar is generated in /tmp/my_putchar.c.'
        print
        print colored("-> vim usage:", "green")
        print '\t;v         -> Show a file browser on the left of the screen'
        print '\t;i         -> Do a hard tab'
        print '\t;<Tabt>    -> Jump to the next <..>'
        print '\ttn         -> Create a new tab'
        print '\t<F2>       -> cat the current file'
        print '\t;cwhile    -> create a C while loop'
        print '\t;cif       -> create a C if statement'
        print '\t<F5>       -> Execute current python file'
        print colored("-> Bash and fish custom commands:", "green")
        print '\tcls        -> does this command: clear;pwd;ls'
        print '\tc          -> clear'
        print '\tl          -> ls --color'
        print '\tmd [dir]   -> create a dir and change to it'
        print colored("-> Software installed:", "green")
        print '\t-vim'
        print '\t-fish'
        print '\t-git'
        print '\t-moc'
        print '\t-nasm'
        print '\t-gparted'
        print '\t-chromium-browser'
        print '\t-nmap'
        print '\t-fping'
        print '\t-php'
        print '\t-dialog'
        print '\t-whois'
        print '\t-wireshark'

if __name__ == "__main__":
    config_usage().display_everything()
